swagger: "2.0"
info:
  description: "This is a prototype retail API."
  version: "1.0.0"
  title: "Product Info API"
  contact:
    email: "drew.nollsch@gmail.com"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
basePath: "/api"
paths:
  /products:
    get:
      operationId: "products.read_all_products"
      tags:
        - "products"
      summary: "Read all product entries from database"
      description: "Read all product info from database"
      responses:
        "200":
          description: "Successfully read product data"
          schema:
            type: "object"
            items:
              properties:
                products:
                  type: "array"
                  items:
                    properties:
                      product_id:
                        type: "number"
                      name:
                        type: "string"
                      price:
                        type: "string"
        "404":
          description: "Resource not found"
    post:
      operationId: "products.create_products"
      tags:
        - "products"
      summary: "Add new products to the database"
      description: "Submit JSON data to add a list of new products"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of new products to be added to database"
          required: true
          schema:
            type: "object"
            items:
              properties:
                products:
                  type: "array"
                  items:
                    properties:
                      name:
                        type: "string"
                      price:
                        type: "string"
      responses:
        "201":
          description: "Products added successfully"
        "405":
          description: "Invalid input"
  /articles:
    get:
      operationId: "articles.read_all_articles"
      tags:
        - "articles"
      summary: "Read all article entries from database"
      description: "Read all article info from database"
      responses:
        "200":
          description: "Successfully read article data"
          schema:
            type: "object"
            items:
              properties:
                inventory:
                  type: "array"
                  items:
                    properties:
                      article_id:
                        type: "number"
                      name:
                        type: "string"
                      stock:
                        type: "number"
        "404":
          description: "Resource not found"
    post:
      operationId: "articles.create_articles"
      tags:
        - "articles"
      summary: "Add new articles to the database"
      description: "Submit JSON data to add a list of new articles"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "List of new articles to be added to database"
          required: true
          schema:
            type: "object"
            items:
              properties:
                inventory:
                  type: "array"
                  items:
                    properties:
                      name:
                        type: "string"
                      stock:
                        type: "number"
      responses:
        "201":
          description: "Articles added successfully"
        "405":
          description: "Invalid input"
  /products/{productId}:
    patch:
      operationId: "products.sell_product"
      tags:
        - "products"
      summary: "Sell a product and remove its component articles from inventory"
      description: "Sell a product and remove its component articles from inventory"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "productId"
          description: "ID of the product to be sold"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "One product removed from inventory"
        "405":
          description: "Invalid input"
  /upload:
    post:
      operationId: "utils.upload_file"
      summary: Uploads a file.
      tags:
        - "file_upload"
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: formData
          type: file
          required: true
          description: The file to upload.
      responses:
        "201":
          description: "Successfully uploaded file"
        "409":
          description: "All products already exist in database"
  /inventory:
    get:
      operationId: "products.read_product_inventory"
      tags:
        - "inventory"
      summary: "Show current product inventory"
      description: "Show current product inventory"
      responses:
        "200":
          description: "Successfully read product inventory data"
          schema:
            type: "object"
            items:
              properties:
                product_inventory:
                  type: "array"
                  items:
                    properties:
                      product_id:
                        type: "number"
                      product_name:
                        type: "string"
                      product_price:
                        type: "string"
                      product_stock:
                        type: "number"
        "404":
          description: "Resource not found"
